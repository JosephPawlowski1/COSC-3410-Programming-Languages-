COSC 3410 - Programming Languages
Assignment #2
More Scheming
Due: Fri, Sept 14, 2018
Submit a file containing the define for each of the functions described below. I'd like all of the function definition to be in one file. Also provide a sample run showing the test cases listed with the problem and at least two other test cases which you make up.
Problems should be submitted using the D2L dropbox by 11:59PM on Friday.

I would like each function to be accompanied by a list of the cases that you have divided the input into and a description of the output in each case. Try to use normal English to write these (rather than just sort of repeating the Scheme code). This could be in comments in the Scheme code file or in a separate document if you prefer.

I would also like the cond pairs to be enclosed in square brackets rather than parentheses (like in Krishnamurthy's examples and my class examples). This should help you keep track of whether you have a test and a value in each pair.

Finally, each function should have comments saying who wrote it (once per file is OK) and giving the "signature" of the function.

Do all four problems. Be sure to use good functional style.

1. Write a function updown which takes a list of numbers as a parameter and returns the list with each number changed according to the following rule: Add one to each even number and subtract one from each odd number. Scheme has built-in functions even? and odd? which might be useful.

Examples:

  (updown '(2 4 10 3 6))
 '(3 5 11 2 7)

  (updown '(1 3))
 '(0 2)

  (updown '())
 '()

  (updown '(1 2 -3 -4 7 12))
 '(0 3 -4 -3 6 13)
2. Write a function zip which takes two lists as parameters and returns a list of pairs where the first pair consists of the first elements of the two parameters, the second pair has the second elements of the parameters, etc. If the lists are not the same length, you should use the builtin function error to report an error. The function error takes two parameters, an atom for the name of the function, and a string for error message. Thus, you might use something like

 (error 'zip "first list too short")
Examples:

  (zip '(a b c d e) '(32 7 10 3 1) )
 '((a 32) (b 7) (c 10) (d 3) (e 1))

  (zip '() '() )
 '()

  (zip '((a b) c (d e f)) '(c (a) (b c)) )
 '(((a b) c) (c (a)) ((d e f) (b c)))

  (zip '(1 2 -3) '(50 40 30 20))
 x x zip: first list too short
3. Write a function deep-mult which takes a list as a parameter and computes the product of all numbers which appear anywhere in the list or in sublists. We will follow the usual mathematical convention that a product of no numbers is 1 (the multiplicative identity). You may find it useful to know that Scheme has a function number? which returns #t if its argument is numeric atom and #f otherwise.

Examples:

  (deep-mult '(5 a b 8 2))
 80

  (deep-mult '((4 (6 1)) 2 3 (4)))
 576

  (deep-mult '(these (aren't 77) (all 32 (numbers 93 here))))
 229152

  (deep-mult '())
 1

  (deep-mult '(no numbers here))
 1
4. Write a function drop-parens which takes a list as a parameter and returns a list in which all nested parentheses have been removed. [Scheme has a built-in function flatten which does this same thing. Don't use flatten in your solution to this problem.]

Examples:

  (drop-parens '((a 34)(b 77)(g 6)) )
 '(a 34 b 77 g 6)

  (drop-parens '(a b c) )
 '(a b c)

  (drop-parens '() )
 '()

  (drop-parens '(()((() x)())) )
 '(x)
 
